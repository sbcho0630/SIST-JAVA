package com.sist.java;
/*
 * 	[데이터 저장]
 * 	========
 * 	<변수> : 한 개의 데이터를 저장하는 공간
 *  1. 데이터형
 *   1) 기본형 : 자바 언어에서 메모리 크기를 지정
 *   - 정수형 : byte(1byte), short(2byte), int(4byte), long(8byte)
 *   - 실수형 : float(4byte), double(8byte)
 *   - 문자형 : char (2byte)
 *   - 논리형  : boolean(1byte)
 *   - 데이터 크기 (표현범위) : byte < short, char < int < long < float < double ==> 형변환 시 잘 기억할 것 
 *   										   ===========   ==============
 *  								표현법 예시	10L(l)			10.5F(f)
 *   2) 참조형 
 *   - 주소를 저장한 다음에 데이터를 참조 : 배열, 클래스
 *     ==============
 *     	참조형
 *     	====
 *     	주소 ========> 스택 (메모리 자체 관리) ==> {}을 벗어나면 삭제
 *     	실제 데이터 ===> 힙 ==> 프로그래머가 관리 ==> 가비지 컬렉션
 *     ===> 메소드
 *     		====
 *     		리턴형(실행 결과값), 매개변수(사용자 요청값)  
 *     						=================
 *     						(1) 값만 전송 (Call by Value) : 복사본이 넘어감 
 *     						(2) 주소 전송 (Call by Reference) : 원본이 넘어감 ex) 배열, 클래스 
 *   2-1) 배열 : 같은 크기의 데이터를 여러개 저장
 *   		 데이터형[] 배열명 = new 데이터형[저장갯수] 
 *   		 =============		 =============
 *   			스택에 저장			힙에 저장 
 *   2-2) 클래스 : 다른 크기의 데이터를 여러개 저장
 *    -----------------------------------------------------
 *    - 데이터만 모아서 관리 => ~VO, ~DTO : 캡슐화
 *    - 메소드만 모아서 관리 => ~DAO, ~Service, ~Manager
 *    ----------------------------------------------------- 웹 
 *    - 데이터+메소드(혼합) 관리 => 조립식 
 *
 *
 *  [데이터 처리]
 *  =========
 *  1. 연산자
 *   1) 단항연산자	
 *   	- 증감연산자 (++, --) 
 *   	- 부정연산자 (!) ==> boolean
 *   2) 이항연산자
 *   	- 산술연산자 (+,-,*,/) 
 *   	- 비교연산자 (==, !=, <, >, >=) : 결과값은 boolean
 *   		=> 주 사용처 : if문  
 *   	- 논리연산자 (&&, ||) ==> 제어문
 *   		효율적인 연산
 *   		&& (AND, 직렬) => 왼쪽 결과가 false면 오른쪽은 계산X
 *   		|| (OR, 병렬) => 왼쪽 결과가 true면 오른쪽은 계산X
 *   	- 대입연산자(=,+=,-=) : 연산자 우선순위가 가장 낮다 
 *   3) 삼항연산자 : if~else 문과 같음
 *   	- 조건?참일때값:거짓일때값
 *  	
 *  2. 제어문 
 *   1) 조건문 (if~else if~else)
 *   2) 선택문 (switch~case)
 *   3) 반복문  (for, while)
 *   4) 반복제어문 (break, continue) ==> while: 데이터베이스, 네트워크
 *   	- break : 반복을 중단
 *   	- continue: 제외(특정부분)
 *   	** while문 ==> 무한루프 
 *   ============================== 기본문법 
 *   
 *   관련된 명령문, 변수를 묶어서 관리
 *   명령문 묶기(메소드) ********** 개게지향의 핵심 (재사용이 가능)
 *	 ==============
 *	 메소드 : 결과값(리턴형), 요청값(매개변수)
 *			==========
 *	============================================================	
 *			리턴형 				요청값(매개변수)	
 *			** 한개만 올 수 있음 		**여러개 올 수 있다 
 *	============================================================
 *			O					O => DB(검색)
 *	============================================================
 *			O					X
 *	============================================================
 *			X (void)			O => DB(insert, update, delete)
 *	============================================================
 *			X (void)			X => 거의 존재하지 않는다. 
 *	============================================================
 *
*/
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
	}
	
	

}











